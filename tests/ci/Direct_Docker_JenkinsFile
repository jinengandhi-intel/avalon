#!groovy

// Copyright 2019 Intel Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ------------------------------------------------------------------------------

pipeline {
    agent {
        node {
            label 'nightly'
        }
    }

    options {
        timestamps()
    }

    environment {
        ISOLATION_ID = sh(returnStdout: true,
                          script: 'printf $BUILD_TAG | sha256sum | cut -c1-64').trim()
        COMPOSE_PROJECT_NAME = sh(returnStdout: true,
                          script: 'printf $BUILD_TAG | sha256sum | cut -c1-64').trim()
    }

    stages {

        stage ('Prepare Build Parameters') {
            steps {
                script {
                    env.NIGHTLY_WORKSPACE_DIR = env.HOME + "/automation_nightly/" + env.JK_RUNID
                    println "###################################################################################################################"
                    println "#=================================================================================================================="
                    println "# JK_RUNID: " + env.JK_RUNID
                    println "# NIGHTLY_WORKSPACE_DIR: " + env.NIGHTLY_WORKSPACE_DIR
                    println "#=================================================================================================================="
                    println "###################################################################################################################"
                }
            }
        }

        stage('Checkout Master & Validation Repo') {
            steps {
                sh '''
                mkdir -p $NIGHTLY_WORKSPACE_DIR/dev_repo
                cd $NIGHTLY_WORKSPACE_DIR/dev_repo
                git clone https://github.com/hyperledger/avalon.git
                cd avalon

                if docker ps -a | grep -q 'avalon-shell'; then
                    docker stop $(docker ps -a -q)
                    docker rm $(docker ps -a -q)
                fi
                docker system prune -af

                mkdir -p $NIGHTLY_WORKSPACE_DIR/val_repo
                cd $NIGHTLY_WORKSPACE_DIR/val_repo
                git clone https://github.com/jinengandhi-intel/avalon.git
                cd avalon
                cp -rf $NIGHTLY_WORKSPACE_DIR/val_repo/avalon/ci/avalon-direct-model-tests.yaml $NIGHTLY_WORKSPACE_DIR/dev_repo/avalon/ci/
                cp -rf $NIGHTLY_WORKSPACE_DIR/val_repo/avalon/tests/automation_framework $NIGHTLY_WORKSPACE_DIR/dev_repo/avalon/tests/
                cp -rf $NIGHTLY_WORKSPACE_DIR/val_repo/avalon/tests/ci/run_tests.sh $NIGHTLY_WORKSPACE_DIR/dev_repo/avalon/tools/
                cp -rf $NIGHTLY_WORKSPACE_DIR/val_repo/avalon/docker/Dockerfile $NIGHTLY_WORKSPACE_DIR/dev_repo/avalon/docker/
                '''
            }
        }

        stage('Build Avalon Direct Model Components') {
            steps {
                sh '''
                cd $NIGHTLY_WORKSPACE_DIR/dev_repo/avalon
                echo `pwd`
                mkdir logs
                docker-compose -f ci/docker-compose-direct-model-build.yaml build
                '''
            }
        }

        stage('Run Avalon Direct Model Tests') {
            steps {
                sh '''
                cd $NIGHTLY_WORKSPACE_DIR/dev_repo/avalon
                echo `pwd`
                INSTALL_TYPE="" $NIGHTLY_WORKSPACE_DIR/dev_repo/avalon/bin/run_tests -d
                '''
            }
        }

        stage('Create git archive') {
            steps {
                sh '''
                cd $NIGHTLY_WORKSPACE_DIR/dev_repo/avalon
                REPO=$(git remote show -n origin | grep Fetch | awk -F'[/.]' '{print $6}')
                git archive HEAD --format=zip -9 --output=$WORKSPACE/${JK_RUNID}_${REPO}.zip
                git archive HEAD --format=tgz -9 --output=$WORKSPACE/${JK_RUNID}_${REPO}.tgz
                '''
            }
        }

    }

    post {
        success {
            archiveArtifacts '*.tgz, *.zip'
        }
        aborted {
            error "Aborted, exiting now"
        }
        failure {
            error "Failed, exiting now"
        }
    }
}
