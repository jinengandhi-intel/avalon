#!groovy

// Copyright 2019 Intel Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ------------------------------------------------------------------------------

pipeline {
    agent {
        node {
            label 'avalon_01'
        }
    }

    options {
        timestamps()
    }

    environment {
        ISOLATION_ID = sh(returnStdout: true,
                          script: 'printf $BUILD_TAG | sha256sum | cut -c1-64').trim()
        COMPOSE_PROJECT_NAME = sh(returnStdout: true,
                          script: 'printf $BUILD_TAG | sha256sum | cut -c1-64').trim()
    }

    stages {

        stage ('Prepare Build Parameters') {
            steps {
                env.JK_RUNID = "Nightly_" + new Date().format("yyyy-MM-dd") + "." + env.BUILD_NUMBER.toString()
                env.NIGHTLY_WORKSPACE_DIR = "/home/intel/automation_nightly/" + env.JK_RUNID
                println "###################################################################################################################"
                println "#=================================================================================================================="
                println "# JK_RUNID: " + env.JK_RUNID
                println "# NIGHTLY_WORKSPACE_DIR: " + env.NIGHTLY_WORKSPACE_DIR
                println "#=================================================================================================================="
                println "###################################################################################################################"
            }
        }

        stage('Build avalon components') {
            steps {
                parallel (
                    "Build Avalon Proxy Model Components": {
                        script {
                            sh 'docker-compose -f ci/docker-compose-proxy-model-build.yaml build'
                        }
                    },
                    "Start fabric network": {
                        script {
                            sh './scripts/start_fabric.sh -w ./ -u'
                        }
                    }
                )
            }
        }

        stage('Run Avalon proxy Model Tests') {
            steps {
                sh 'INSTALL_TYPE="" ./bin/run_tests -p'
            }
        }

        stage('Create git archive') {
            steps {
                sh '''
                    REPO=$(git remote show -n origin | grep Fetch | awk -F'[/.]' '{print $6}')
                    git archive HEAD --format=zip -9 --output=$REPO.zip
                    git archive HEAD --format=tgz -9 --output=$REPO.tgz
                '''
            }
        }

    }

    post {
        always {
            echo 'Cleaning up fabric network'
            sh './scripts/start_fabric.sh -w ./ -c'
        }
        success {
            archiveArtifacts '*.tgz, *.zip'
        }
        aborted {
            error "Aborted, exiting now"
        }
        failure {
            error "Failed, exiting now"
        }
    }
}