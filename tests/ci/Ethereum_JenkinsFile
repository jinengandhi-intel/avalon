#!groovy

// Copyright 2019 Intel Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ------------------------------------------------------------------------------

pipeline {
    agent {
        node {
            label 'nightly'
        }
    }

    options {
        timestamps()
    }

    environment {
        ISOLATION_ID = sh(returnStdout: true,
                          script: 'printf $BUILD_TAG | sha256sum | cut -c1-64').trim()
    }

    stages {

        stage ('Prepare Build Parameters') {
            steps {
                script {
                    env.JK_RUNID = "Nightly_" + new Date().format("yyyy-MM-dd") + "." + env.BUILD_NUMBER.toString()
                    env.NIGHTLY_WORKSPACE_DIR = env.HOME + "/automation_nightly/" + env.JK_RUNID
                    println "###################################################################################################################"
                    println "#=================================================================================================================="
                    println "# JK_RUNID: " + env.JK_RUNID
                    println "# NIGHTLY_WORKSPACE_DIR: " + env.NIGHTLY_WORKSPACE_DIR
                    println "#=================================================================================================================="
                    println "###################################################################################################################"
                }
            }
        }

        stage('Checkout Master & Validation Repo') {
            steps {
                sh '''

                if docker ps -a | grep -q 'avalon-shell'; then
                    docker stop $(docker ps -a -q)
                    docker rm $(docker ps -a -q)
                fi
                docker system prune -af

                mkdir -p $NIGHTLY_WORKSPACE_DIR/dev_repo
                cd $NIGHTLY_WORKSPACE_DIR/dev_repo
                git clone https://github.com/hyperledger/avalon.git
                cd avalon

                mkdir -p $NIGHTLY_WORKSPACE_DIR/val_repo
                cd $NIGHTLY_WORKSPACE_DIR/val_repo
                git clone https://github.com/jinengandhi-intel/avalon.git
                cd avalon
                sed -i "s/proxy_mode = False/proxy_mode = True/g" tests/automation_framework/globals.py
                sed -i "s/blockchain_type = ''/blockchain_type = 'ethereum'/g" tests/automation_framework/globals.py
                cp -rf $NIGHTLY_WORKSPACE_DIR/val_repo/avalon/tests/ci $NIGHTLY_WORKSPACE_DIR/dev_repo/avalon/tests/
                cp -rf $NIGHTLY_WORKSPACE_DIR/val_repo/avalon/tests/ci/avalon-besu-proxy-model-tests.yaml $NIGHTLY_WORKSPACE_DIR/dev_repo/avalon/ci/
                cp -rf $NIGHTLY_WORKSPACE_DIR/val_repo/avalon/tests/ci/run_besu_proxy_model_tests.sh $NIGHTLY_WORKSPACE_DIR/dev_repo/avalon/tools/
                cp -rf $NIGHTLY_WORKSPACE_DIR/val_repo/avalon/tests/ci/run_fabric_proxy_model_tests.sh $NIGHTLY_WORKSPACE_DIR/dev_repo/avalon/tools/
                chmod +x $NIGHTLY_WORKSPACE_DIR/dev_repo/avalon/tests/ci/run_besu_proxy_model_tests.sh
                cp -rf $NIGHTLY_WORKSPACE_DIR/val_repo/avalon/tests/ci/run_tests $NIGHTLY_WORKSPACE_DIR/dev_repo/avalon/bin/
                cp -rf $NIGHTLY_WORKSPACE_DIR/val_repo/avalon/tests/automation_framework $NIGHTLY_WORKSPACE_DIR/dev_repo/avalon/tests/
                cp -rf $NIGHTLY_WORKSPACE_DIR/val_repo/avalon/docker/Dockerfile $NIGHTLY_WORKSPACE_DIR/dev_repo/avalon/docker/
                '''
            }
        }

        stage('Start Ethereum Network') {
            steps {
                sh '''
                export TCF_HOME=$NIGHTLY_WORKSPACE_DIR/dev_repo/avalon
                echo `pwd`
                cd $NIGHTLY_WORKSPACE_DIR/dev_repo/avalon/docs/dev-environments/ethereum/besu
                ./startup.sh
                '''
            }
        }

        stage('Build Avalon Proxy Model Components') {
            steps {
                sh '''
                cd $NIGHTLY_WORKSPACE_DIR/dev_repo/avalon
                mkdir logs
                echo `pwd`
                docker-compose -f tests/ci/docker-compose-besu-proxy-model-build.yaml build
                '''
            }
        }

        stage('Run Avalon proxy Model Tests') {
            steps {
                sh '''
                cd $NIGHTLY_WORKSPACE_DIR/dev_repo/avalon
                echo `pwd`
                INSTALL_TYPE="" $NIGHTLY_WORKSPACE_DIR/dev_repo/avalon/bin/run_tests -b 2>&1 | tee logs/genericclient_output.txt

                python tests/ci/verifytests.py -o logs/genericclient_output.txt
                '''
            }
        }

    }

    post {
        always {
            echo 'Cleaning up Ethereum network'
            sh '''
            export TCF_HOME=$NIGHTLY_WORKSPACE_DIR/dev_repo/avalon
            cd $NIGHTLY_WORKSPACE_DIR/dev_repo/avalon/docs/dev-environments/ethereum/besu
            ./cleanup.sh
            '''
        }
        aborted {
            error "Aborted, exiting now"
        }
        failure {
            error "Failed, exiting now"
        }
    }
}